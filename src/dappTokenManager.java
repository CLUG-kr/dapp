/* Generated By:JavaCC: Do not edit this line. dappTokenManager.java */
import java.io.*;

/** Token Manager. */
public class dappTokenManager implements dappConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1380L) != 0L)
            return 0;
         if ((active0 & 0x18080000000L) != 0L)
            return 2;
         if ((active0 & 0x3000000000000000L) != 0L)
            return 21;
         if ((active0 & 0xfffec40L) != 0L)
         {
            jjmatchedKind = 28;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0x2388c40L) != 0L)
            return 0;
         if ((active0 & 0x8000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 28;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x5c76000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 1;
            return 0;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 46;
         return jjMoveStringLiteralDfa1_0(0x4000000000L);
      case 34:
         return jjStartNfaWithStates_0(0, 60, 21);
      case 37:
         return jjStopAtPos(0, 62);
      case 38:
         return jjStopAtPos(0, 44);
      case 39:
         return jjStartNfaWithStates_0(0, 61, 21);
      case 40:
         return jjStopAtPos(0, 49);
      case 41:
         return jjStopAtPos(0, 50);
      case 42:
         return jjStopAtPos(0, 41);
      case 43:
         return jjStartNfaWithStates_0(0, 39, 2);
      case 44:
         return jjStopAtPos(0, 48);
      case 45:
         jjmatchedKind = 40;
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 46:
         return jjStopAtPos(0, 58);
      case 47:
         return jjStopAtPos(0, 42);
      case 58:
         return jjStopAtPos(0, 55);
      case 59:
         return jjStopAtPos(0, 56);
      case 60:
         jjmatchedKind = 33;
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 61:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 62:
         jjmatchedKind = 35;
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 63:
         return jjStopAtPos(0, 57);
      case 91:
         return jjStopAtPos(0, 51);
      case 93:
         return jjStopAtPos(0, 52);
      case 94:
         return jjStopAtPos(0, 43);
      case 123:
         return jjStopAtPos(0, 53);
      case 124:
         return jjStopAtPos(0, 45);
      case 125:
         return jjStopAtPos(0, 54);
      case 44536:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 44544:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 45149:
         return jjStartNfaWithStates_0(0, 12, 0);
      case 46972:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 47196:
         return jjStartNfaWithStates_0(0, 9, 0);
      case 47484:
         return jjStartNfaWithStates_0(0, 8, 0);
      case 47564:
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 47582:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 47928:
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 48712:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 49373:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      case 49884:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 49892:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 50500:
         return jjMoveStringLiteralDfa1_0(0xc00000L);
      case 51004:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 51012:
         return jjStartNfaWithStates_0(0, 7, 0);
      case 51068:
         return jjMoveStringLiteralDfa1_0(0x8000000L);
      case 51221:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 54252:
         return jjMoveStringLiteralDfa1_0(0x800L);
      case 54616:
         return jjMoveStringLiteralDfa1_0(0x6000000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 61:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 36);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         break;
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 45716:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L);
      case 45768:
         return jjMoveStringLiteralDfa2_0(active0, 0xc10000L);
      case 47196:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(1, 10, 0);
         break;
      case 47732:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(1, 21, 0);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 0);
         break;
      case 49457:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 0);
         break;
      case 49688:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000L);
      case 50557:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 0);
         break;
      case 51088:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L);
      case 51089:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 0);
         break;
      case 51109:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000L);
      case 52824:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 54632:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 0);
         break;
      case 54805:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(1, 15, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 44152:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(2, 26, 0);
         break;
      case 44256:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 0);
         break;
      case 46412:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(2, 27);
         break;
      case 47564:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(2, 24, 0);
         break;
      case 47732:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 0);
         break;
      case 54805:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 0);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 0);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 0);
         else if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 0);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 0);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xfffff00000000000L, 0x7fffffL
};
static final long[] jjbitVec2 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xfffffffffL, 0x0L
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 21;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if ((0x3ff800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  else if ((0x8400000000L & l) != 0L)
                  {
                     if (kind > 30)
                        kind = 30;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 29)
                        kind = 29;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x8400000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAddTwoStates(4, 5);
                  break;
               case 6:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(7);
                  break;
               case 8:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 9:
                  if ((0x3ff800000000000L & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 10:
                  if ((0x8400000000L & l) != 0L && kind > 30)
                     kind = 30;
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjstateSet[jjnewStateCnt++] = 20;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 21:
               case 9:
                  if ((0x7fffffeaffffffeL & l) != 0L)
                     jjCheckNAddTwoStates(9, 10);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 59)
                        kind = 59;
                     jjCheckNAddTwoStates(19, 20);
                  }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 5:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(3, 4);
                  break;
               case 11:
                  if (curChar == 101 && kind > 32)
                     kind = 32;
                  break;
               case 12:
                  if (curChar == 117)
                     jjCheckNAdd(11);
                  break;
               case 13:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 115)
                     jjCheckNAdd(11);
                  break;
               case 16:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 59)
                     kind = 59;
                  jjCheckNAdd(20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(0);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 21 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   2, 3, 5, 6, 7, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 215:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\uc2dc\uc791", "\uc744", "\ub97c", 
"\ub85c", "\uc73c\ub85c", "\ud3ec\ud568", "\ub05d", "\uc815\uc218\ud615", 
"\uc2e4\uc218\ud615", "\ube48\ud615", "\ub9de\ub2c8\ud615", "\uae00\uc790\ud615", 
"\ubb38\uc7a5\ud615", "\uc0dd\uc131", "\ub9cc\uc57d", "\ub77c\uba74", "\uc544\ub2c8\uace0", 
"\uc544\ub2c8\uba74", "\uadf8\uce58\ub9cc", "\ud558\uba74", "\ud558\ub294\uac78", "\uc77c\40\ub54c", 
null, null, null, "\55\76", null, "\74", "\74\75", "\76", "\76\75", "\75\75", 
"\41\75", "\53", "\55", "\52", "\57", "\136", "\46", "\174", "\41", "\75", "\54", "\50", 
"\51", "\133", "\135", "\173", "\175", "\72", "\73", "\77", "\56", null, "\42", 
"\47", "\45", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x7fffffffffffffc1L, 
};
static final long[] jjtoSkip = {
   0x1eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[21];
static private final int[] jjstateSet = new int[42];
static protected char curChar;
/** Constructor. */
public dappTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public dappTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 21; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
