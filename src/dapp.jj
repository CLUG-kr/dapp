/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  LOOKAHEAD = 2;
}
PARSER_BEGIN(dapp)

import java.io.*;

public class dapp
{
  static String resultStr = "";
  public static void main(String args []) throws ParseException
  {
    dapp parser = new dapp(System.in);
    System.out.println("갑니다요 : ");
  	try {
      parser.one_line();
      System.out.println("OK.");
    } catch(ParseException e) {
      System.out.println("NOK.");
      e.printStackTrace();
    }

    try {
      FileWriter fw = new FileWriter("output.txt");
      BufferedWriter bw = new BufferedWriter(fw);
      bw.write(resultStr);
      bw.close();
    } catch(Exception e) {
       e.printStackTrace();
  	}
  }
}

PARSER_END(dapp)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
   < #LETTER: ["\uAC00" - "\uD7A3"] >
|  "시작"
|  "을" | "를" | "로" | "으로"
|  "포함"
|  "끝"
|  "정수형" | "실수형" | "빈형" | "맞니형" | "글자형" | "문장형" 
|  "생성"
|  "만약"  | "라면" | "아니고" | "아니면"
| "그치만" | "하면" | "하는걸" | "일 때"
|  "에" | "대입"
}

TOKEN :
{
  < DOT : "." >
| < #ENG_NAME : ["a"-"z","A"-"Z",".","_","0"-"9"] >
| < NAME :  ( <LETTER > | <ENG_NAME> )+ >
| < NUMERIC_LITERAL : (["+","-"])? (["0"-"9"])+ ("." (["0"-"9"])+)? (["E","e"] (["+","-"])? (["0"-"9"])+)? >
| < STRING_LITERAL : ("'"|"\"") (["a"-"z","A"-"Z","/","_","0"-"9","[","]"])* ("'"|"\"") >
| < ARROW : "->" >
| < LOGICAL_LITERAL : ("true"|"false") >
| < LESS : "<" >
| < LESS_EQUAL : "<=" >
| < GREATER : ">" >
| < GREATER_EQUAL : ">=" >
| < EQUAL : "==" >
| <	NOT_EQUAL : "!=" >
| < PLUS : "+" >
| < MINUS : "-" >
| < MULT : "*" >
| < DIV : "/" >
| < POW : "^" >
| < AND : "&" >
| < OR : "|" >
| < NOT : "!" >
| < ASSIGN : "=" >
| < COMMA : "," >
| < L_PAREN : "(" >
| < R_PAREN : ")" >
| < L_BRACKET : "[" >
| < R_BRACKET : "]" >
| < L_BRACE : "{" >
| < R_BRACE : "}" >
| < COLON : ":" >
| < SEMI_COLON : ";" >
| < QUESTION : "?" >
| < IDENTIFIER : (["_","a"-"z","A"-"Z"])+ (["a"-"z","A"-"Z","0"-"9","_"])* >
}

void one_line() :
{}
{
  (preprocessor())* global()
}

void preprocessor():{Token t;}
{
  ("\"" (t = <NAME>) "\"" ("을"|"를") "포함" { resultStr += "#include " + "\"" + t.toString() + "\""; })
  | ("<" (t = <NAME>) ">" ("을"|"를") "포함" { resultStr += "#include <" + t.toString() + ">"; })
}

void global():
{}
{
	(variable_declaration() | function_declaration())* start() (variable_declaration() | function_declaration())* "끝"
}

void variable_declaration():
{}
{
	data_type() "\'" <NAME> "\'" ["을"|"를"] [ "\'" <NAME> "\'" "로"|"으로"]"생성" "."
}

void function_declaration():
{}
{
	data_type()	< NAME > "(" [data_type() < NAME >] ("," data_type() < NAME >)* ")" sentences()
	
}

void data_type():
{}
{
  	"정수형" | "실수형" | "빈형" | "맞니형" | "글자형" | "문장형"
}

void start():
{}
{
	"시작" {resultStr += "int main()" + "\n{"; } sentences() {resultStr += "\nreturn 0;\n}";}
}  

void if_statement():
{}
{
  	"만약" "(" logical_statement() ")" "라면" sentences()
  	("아니고" "(" logical_statement() ")" "라면" sentences())*
  	[("아니면" sentences())]
}

void while_statement():
{}
{
	"그치만" 
	( "(" logical_statement() ")" "하면" sentences() "하는걸" "!") |
	("(" sentences() ")" "일 때" "(" logical_statement() ")" "하면" sentences() "<" sentences() ">" "하는걸" "!")
}

void logical_statement():
{Token a; Token b;}
{
  (a = <NAME>) {resultStr += a.toString();} logical_operator() (b = <NAME>) {resultStr += b.toString();}
}

void logical_operator():
{}
{
  	"=" {resultStr += "==";}| "<" {resultStr += "<";}| ">" {resultStr += ">";}| "<=" {resultStr += "<=";}| ">="  {resultStr += ">=";}| "!=" {resultStr += "!=";} 
}

void binary_operator():
{}
{
  	"+" {resultStr += "+";}| "*" {resultStr += "*";}| "-" {resultStr += "-";}| "/" {resultStr += "/";}| "%" {resultStr += "%";}
}

void sentences():
{}
{
	"{" sentences() "}"| (sentence())*
}

void sentence():
{}
{
	( variable_declaration() | logical_statement() | if_statement() | while_statement() | input_statement() | <NAME>)
}

void input_statement():
{}
{
  <NAME> "에" <NAME> ("을"|"를") "대입" <DOT> 
}